<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski, et al., (c) 2015-2021

This Python file implements a library called "SiEPIC-EBeam-Beta"
# - Development components, e.g., Layout only with no Compact Model.
 - Fixed GDS cell components
 - PCells

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.

Crash warning:
 https://www.klayout.de/forum/discussion/734
 This library has nested PCells. Running this macro with a layout open may
 cause it to crash. Close the layout first before running.
"""

import pya
from SiEPIC.utils import get_technology_by_name
import os
from pathlib import Path

dir_path = os.path.dirname(os.path.realpath(__file__))
if dir_path not in sys.path:
    sys.path.append(dir_path)

files = [f for f in os.listdir(os.path.join(os.path.dirname(
    os.path.realpath(__file__)),'pcells_Beta')) if '.py' in Path(f).suffixes  and '__init__' not in f]
import pcells_Beta
import importlib
importlib.invalidate_caches()
pcells_=[]
for f in files:
    module = 'pcells_Beta.%s' % f.replace('.py','')
    print(' - found module: %s' % module)
    m = importlib.import_module(module) 
    print(m)
    pcells_.append(importlib.reload(m))
    
class SiEPIC_EBeam_Library_Beta(Library):
  """
  The library where we will put the PCells and GDS into 
  """
  def __init__(self):
  
    tech_name = 'EBeam'
    library = tech_name+'_Beta'

    print(" - Initializing '%s' Library." % library)

    self.description = "v0.3.31, Beta components"
  
    # Import all the GDS files from the tech folder "fixed" - those are non-parameterized library devices
    import os, fnmatch
    dir_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "../gds/development")
    search_str = '*' + '.oas'
    for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
        for filename in fnmatch.filter([f.lower() for f in filenames], search_str):
            file1=os.path.join(root, filename)
            print(" - reading %s" % file1 )
            self.layout().read(file1)
    search_str = '*' + '.gds'
    for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
        for filename in fnmatch.filter([f.lower() for f in filenames], search_str):
            file1=os.path.join(root, filename)
            print(" - reading %s" % file1 )
            self.layout().read(file1)
        
    # Create the PCell declarations
    for m in pcells_:
        mm = m.__name__.replace('pcells_Beta.','')
        mm2 = m.__name__+'.'+mm+'()'
        print(' - register_pcell %s, %s' % (mm,mm2))
        self.layout().register_pcell(mm, eval(mm2))
            
    print('\nDone importing the pcells.')

    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)
    self.technology=tech_name
    self.layout().add_meta_info(LayoutMetaInfo("path",os.path.realpath(__file__)))
    self.layout().add_meta_info(LayoutMetaInfo("technology",tech_name))
    
SiEPIC_EBeam_Library_Beta()

</text>
</klayout-macro>
